package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/example/engbot/pkg/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Constants for callback data
const (
	callbackStartAddTopic = "start_add_topic"
	callbackCancelAction  = "cancel_action"
)

// UserState represents the current state of user interaction
type UserState struct {
	Action    string
	Step      int
	Data      map[string]string
}

var userStates = make(map[int64]*UserState)

// HandleCommand handles bot commands
func (b *Bot) HandleCommand(ctx context.Context, message *tgbotapi.Message) error {
	var err error
	switch message.Command() {
	case "start":
		err = b.handleStart(message)
	case "help":
		err = b.handleHelp(message)
	case "add":
		err = b.handleAddTopic(message)
	case "list":
		err = b.handleListTopics(ctx, message)
	case "delete":
		err = b.handleDeleteTopic(ctx, message)
	case "stats":
		err = b.handleStats(ctx, message)
	case "settings":
		err = b.handleSettings(ctx, message)
	case "notify":
		err = b.handleNotifyCommand(ctx, message)
	case "time":
		err = b.handleTimeCommand(ctx, message)
	default:
		err = b.handleUnknownCommand(message)
	}
	return err
}

func (b *Bot) handleStart(message *tgbotapi.Message) error {
	if message == nil || message.From == nil || message.Chat == nil {
		return fmt.Errorf("invalid message: required fields are missing")
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
	_, err := b.userRepo.GetByTelegramID(context.Background(), message.From.ID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
		newUser := &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}
		
		if err = b.userRepo.Create(context.Background(), newUser); err != nil {
			return fmt.Errorf("failed to create user: %w", err)
		}
	}

	text := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spaced Repetition Manager!\n\n" +
		"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å —Ç–µ–º—ã —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n\n" +
		"üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n" +
		"1. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n" +
		"2. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏\n" +
		"3. –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n" +
		"4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
	return b.sendMessage(msg)
}

func (b *Bot) handleHelp(message *tgbotapi.Message) error {
	text := "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n" +
		"üî∏ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" +
		
		"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏:\n" +
		"/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É\n" +
		"/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º\n" +
		"/delete - –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É\n\n" +
		
		"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
		"/notify on|off - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
		"/time - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
		
		"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n" +
		"1Ô∏è‚É£ –ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å\n" +
		"2Ô∏è‚É£ –ß–µ—Ä–µ–∑ 2 –¥–Ω—è\n" +
		"3Ô∏è‚É£ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è\n" +
		"4Ô∏è‚É£ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π\n" +
		"5Ô∏è‚É£ –ß–µ—Ä–µ–∑ 15 –¥–Ω–µ–π\n" +
		"6Ô∏è‚É£ –ß–µ—Ä–µ–∑ 25 –¥–Ω–µ–π\n" +
		"7Ô∏è‚É£ –ß–µ—Ä–µ–∑ 40 –¥–Ω–µ–π\n\n" +
		
		"üí° –°–æ–≤–µ—Ç—ã:\n" +
		"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n" +
		"‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n" +
		"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = createKeyboard([][]MenuButton{
		{{Text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", CallbackData: "main_menu"}},
	})
	return b.sendMessage(msg)
}

func (b *Bot) handleAddTopic(message *tgbotapi.Message) error {
	// Set user state to adding topic
	userStates[message.From.ID] = &UserState{
		Action: "adding_topic",
		Step:   1,
		Data:   make(map[string]string),
	}

	text := "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã*\n\n" +
		"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n" +
		"–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞\" –∏–ª–∏ \"–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\""

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = createKeyboard([][]MenuButton{
		{{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: "cancel_action"}},
	})
	
	return b.sendMessage(msg)
}

func (b *Bot) handleListTopics(ctx context.Context, message *tgbotapi.Message) error {
	if message.From == nil {
		return fmt.Errorf("message.From is nil")
	}

	log.Printf("Listing topics for telegram_id: %d", message.From.ID)

	// Get or create user first
	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil || user == nil {
		log.Printf("User not found or error: %v", err)
		// Create new user if not found
		newUser := &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}
		
		if err = b.userRepo.Create(ctx, newUser); err != nil {
			log.Printf("Failed to create user: %v", err)
			return fmt.Errorf("failed to create user: %w", err)
		}
		
		// Get the created user to get their ID
		user, err = b.userRepo.GetByTelegramID(ctx, message.From.ID)
		if err != nil {
			log.Printf("Failed to get created user: %v", err)
			return fmt.Errorf("failed to get created user: %w", err)
		}
	}

	if user == nil || user.ID == 0 {
		log.Printf("User is nil or has ID=0")
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return b.sendMessage(msg)
	}

	log.Printf("Getting topics for user_id: %d", user.ID)
	topics, err := b.topicRepo.GetAllByUserID(ctx, user.ID)
	if err != nil {
		log.Printf("Failed to get topics: %v", err)
		return fmt.Errorf("failed to get topics: %w", err)
	}

	log.Printf("Found %d topics", len(topics))

	if len(topics) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
		msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
		return b.sendMessage(msg)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
	repetitions, err := b.repetitionRepo.GetDueRepetitions(ctx, user.ID)
	if err != nil {
		log.Printf("Failed to get repetitions: %v", err)
		return fmt.Errorf("failed to get repetitions: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º –ø–æ ID —Ç–µ–º—ã
	topicRepetitions := make(map[int64][]models.Repetition)
	for _, rep := range repetitions {
		topicRepetitions[rep.TopicID] = append(topicRepetitions[rep.TopicID], rep)
	}

	var text strings.Builder
	text.WriteString("üìã –í–∞—à–∏ —Ç–µ–º—ã:\n\n")
	
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i, topic := range topics {
		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
		text.WriteString(fmt.Sprintf("%d. %s\n", i+1, topic.Name))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
		if reps, ok := topicRepetitions[topic.ID]; ok && len(reps) > 0 {
			text.WriteString("üîÑ –¢—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!\n")
			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
			button := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚úÖ –ü–æ–≤—Ç–æ—Ä–∏–ª —Ç–µ–º—É \"%s\"", topic.Name),
				fmt.Sprintf("complete_%d", reps[0].ID),
			)
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
		} else {
			text.WriteString("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n")
		}
		text.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text.String())
	if len(keyboard) > 0 {
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	} else {
		msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
	}
	return b.sendMessage(msg)
}

func (b *Bot) handleDeleteTopic(ctx context.Context, message *tgbotapi.Message) error {
	args := message.CommandArguments()
	if args == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete <–Ω–æ–º–µ—Ä>")
		return b.sendMessage(msg)
	}

	index, err := strconv.Atoi(args)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã")
		return b.sendMessage(msg)
	}

	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil {
		return fmt.Errorf("failed to get user: %w", err)
	}

	topics, err := b.topicRepo.GetAllByUserID(ctx, user.ID)
	if err != nil {
		return fmt.Errorf("failed to get topics: %w", err)
	}

	if index < 1 || index > len(topics) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã")
		return b.sendMessage(msg)
	}

	topic := topics[index-1]
	if err := b.topicRepo.Delete(ctx, user.ID, topic.ID); err != nil {
		return fmt.Errorf("failed to delete topic: %w", err)
	}

	text := fmt.Sprintf("–¢–µ–º–∞ \"%s\" —É–¥–∞–ª–µ–Ω–∞", topic.Name)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	return b.sendMessage(msg)
}

func (b *Bot) handleStats(ctx context.Context, message *tgbotapi.Message) error {
	// Get user by telegram ID first
	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil || user == nil {
		// Create new user if not found
		newUser := &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}
		
		if err = b.userRepo.Create(ctx, newUser); err != nil {
			return fmt.Errorf("failed to create user: %w", err)
		}
		
		// Get the created user to get their ID
		user, err = b.userRepo.GetByTelegramID(ctx, message.From.ID)
		if err != nil {
			return fmt.Errorf("failed to get created user: %w", err)
		}
	}
	
	if user == nil || user.ID == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return b.sendMessage(msg)
	}

	stats, err := b.statsRepo.GetUserStatistics(ctx, user.ID)
	if err != nil {
		return fmt.Errorf("failed to get statistics: %w", err)
	}

	if len(stats) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
		return b.sendMessage(msg)
	}

	var text strings.Builder
	text.WriteString("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")

	for _, stat := range stats {
		completionRate := 0.0
		if stat.TotalRepetitions > 0 {
			completionRate = float64(stat.CompletedRepetitions) / float64(stat.TotalRepetitions) * 100
		}

		text.WriteString(fmt.Sprintf("–¢–µ–º–∞: %s\n", stat.TopicName))
		text.WriteString(fmt.Sprintf("–í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: %d\n", stat.TotalRepetitions))
		text.WriteString(fmt.Sprintf("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: %d (%.1f%%)\n\n", stat.CompletedRepetitions, completionRate))
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text.String())
	return b.sendMessage(msg)
}

func (b *Bot) handleSettings(ctx context.Context, message *tgbotapi.Message) error {
	if message.From == nil {
		return fmt.Errorf("message.From is nil")
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil {
		user = &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}
		err = b.userRepo.Create(ctx, user)
		if err != nil {
			return fmt.Errorf("failed to create user: %w", err)
		}
	}

	text := fmt.Sprintf(
		`–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s
–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %d:00

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/notify on|off - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/time <—á–∞—Å> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (0-23)`,
		boolToEnabledString(user.NotificationEnabled),
		user.NotificationHour,
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	return b.sendMessage(msg)
}

func (b *Bot) handleNotifyCommand(ctx context.Context, message *tgbotapi.Message) error {
	args := strings.TrimSpace(strings.TrimPrefix(message.Text, "/notify"))
	if args == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ on –∏–ª–∏ off: /notify <on|off>")
		return b.sendMessage(msg)
	}

	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
		user = &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}
		err = b.userRepo.Create(ctx, user)
		if err != nil {
			return fmt.Errorf("failed to create user: %w", err)
		}
	}

	switch strings.ToLower(args) {
	case "on":
		user.NotificationEnabled = true
	case "off":
		user.NotificationEnabled = false
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ on –∏–ª–∏ off: /notify <on|off>")
		return b.sendMessage(msg)
	}

	err = b.userRepo.Update(ctx, user)
	if err != nil {
		return fmt.Errorf("failed to update user: %w", err)
	}

	text := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è %s", boolToEnabledString(user.NotificationEnabled))
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	return b.sendMessage(msg)
}

func (b *Bot) handleTimeCommand(ctx context.Context, message *tgbotapi.Message) error {
	args := strings.TrimSpace(strings.TrimPrefix(message.Text, "/time"))
	if args == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∞—Å (0-23): /time <—á–∞—Å>")
		return b.sendMessage(msg)
	}

	hour, err := strconv.Atoi(args)
	if err != nil || hour < 0 || hour > 23 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å (0-23)")
		return b.sendMessage(msg)
	}

	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
		user = &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}
		err = b.userRepo.Create(ctx, user)
		if err != nil {
			return fmt.Errorf("failed to create user: %w", err)
		}
	}

	user.NotificationHour = hour
	err = b.userRepo.Update(ctx, user)
	if err != nil {
		return fmt.Errorf("failed to update user: %w", err)
	}

	text := fmt.Sprintf("‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %d:00", hour)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	return b.sendMessage(msg)
}

func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) error {
	text := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	return b.sendMessage(msg)
}

// boolToEnabledString converts a boolean to a human-readable enabled/disabled string
func boolToEnabledString(enabled bool) string {
	if enabled {
		return "–≤–∫–ª—é—á–µ–Ω—ã"
	}
	return "–≤—ã–∫–ª—é—á–µ–Ω—ã"
}

// CheckDueRepetitions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö
func (b *Bot) CheckDueRepetitions(ctx context.Context) error {
	currentHour := time.Now().Hour()
	
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	users, err := b.userRepo.GetUsersForNotification(ctx, currentHour)
	if err != nil {
		return fmt.Errorf("failed to get users for notification: %w", err)
	}

	for _, user := range users {
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
		repetitions, err := b.repetitionRepo.GetDueRepetitions(ctx, user.ID)
		if err != nil {
			log.Printf("Failed to get due repetitions for user %d: %v", user.ID, err)
			continue
		}

		if len(repetitions) == 0 {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		topics, err := b.topicRepo.GetAllByUserID(ctx, user.ID)
		if err != nil {
			log.Printf("Failed to get topics for user %d: %v", user.ID, err)
			continue
		}

		// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–º–∞–º
		topicMap := make(map[int64]models.Topic)
		for _, t := range topics {
			topicMap[t.ID] = t
		}

		var text strings.Builder
		text.WriteString("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏:\n\n")

		for _, rep := range repetitions {
			text.WriteString(fmt.Sprintf("üìö –¢–µ–º–∞: %s\n", topicMap[rep.TopicID].Name))
			text.WriteString(fmt.Sprintf("üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ‚Ññ%d\n\n", rep.RepetitionNumber))
		}

		text.WriteString("\n–ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.")

		msg := tgbotapi.NewMessage(user.TelegramID, text.String())
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
		var keyboard [][]tgbotapi.InlineKeyboardButton
		for _, rep := range repetitions {
			button := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚úÖ –ü–æ–≤—Ç–æ—Ä–∏–ª —Ç–µ–º—É \"%s\"", topicMap[rep.TopicID].Name),
				fmt.Sprintf("complete_%d", rep.ID),
			)
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
		}
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

		if err := b.sendMessage(msg); err != nil {
			log.Printf("Failed to send notification to user %d: %v", user.ID, err)
		}
	}

	return nil
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
func (b *Bot) HandleCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) error {
	if callback == nil || callback.Message == nil || callback.From == nil {
		return fmt.Errorf("invalid callback data: required fields are missing")
	}

	// Always send an answer to the callback query to remove the loading state
	answer := tgbotapi.NewCallback(callback.ID, "")
	if _, err := b.api.Request(answer); err != nil {
		log.Printf("Warning: Failed to answer callback: %v", err)
	}

	message := callback.Message
	var err error

	switch callback.Data {
	case "main_menu":
		err = b.handleMainMenu(callback)
	case "topics_menu":
		err = b.handleTopicsMenu(callback)
	case "settings":
		err = b.handleSettingsMenu(callback)
	case "help":
		err = b.handleHelp(message)
	case "stats":
		err = b.handleStats(ctx, message)
	case "notifications_settings":
		err = b.handleNotificationsSettings(callback)
	case "time_settings":
		err = b.handleTimeSettings(callback)
	case "delete_topic":
		err = b.handleDeleteTopicMenu(callback)
	case "list_topics":
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Message —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º From.ID
		msg := &tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		}
		err = b.handleListTopics(ctx, msg)
	case callbackStartAddTopic:
		err = b.handleStartAddTopic(callback)
	case callbackCancelAction:
		err = b.handleCancelAction(callback)
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ complete_* –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ –ø–æ—Å–ª–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
		if strings.HasPrefix(callback.Data, "complete_") {
			repID, err := strconv.ParseInt(strings.TrimPrefix(callback.Data, "complete_"), 10, 64)
			if err != nil {
				return fmt.Errorf("invalid repetition ID in callback data: %w", err)
			}
			if err = b.handleTopicComplete(ctx, callback.From.ID, callback.Message.Chat.ID, repID); err != nil {
				return err
			}
		} else {
			return b.sendMessage(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
		}
	}

	if err != nil {
		errorMsg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return b.sendMessage(errorMsg)
	}

	return nil
}

func (b *Bot) handleMainMenu(callback *tgbotapi.CallbackQuery, chatID ...int64) error {
	text := "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n" +
		"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º\n" +
		"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏\n" +
		"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
		"‚ùì –ü–æ–º–æ—â—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö"

	if callback == nil {
		if len(chatID) == 0 {
			log.Printf("Error: chat ID is required when callback is nil")
			return fmt.Errorf("chat ID is required when callback is nil")
		}
		log.Printf("Sending main menu to chat %d (no callback)", chatID[0])
		msg := tgbotapi.NewMessage(chatID[0], text)
		msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
		return b.sendMessage(msg)
	}

	if callback.Message == nil {
		log.Printf("Error: callback message is nil for user %d", callback.From.ID)
		return fmt.Errorf("callback message is nil")
	}

	log.Printf("Editing message to show main menu for user %d", callback.From.ID)
	msg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		createKeyboard(b.MainMenuButtons()),
	)
	return b.editMessage(msg)
}

func (b *Bot) handleTopicsMenu(callback *tgbotapi.CallbackQuery) error {
	text := "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n" +
		"üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n" +
		"üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç–µ–º—ã\n" +
		"üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É - —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É"

	msg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		createKeyboard(b.TopicsMenuButtons()),
	)
	return b.editMessage(msg)
}

func (b *Bot) handleSettingsMenu(callback *tgbotapi.CallbackQuery) error {
	text := "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n" +
		"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
		"üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"

	msg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		createKeyboard(b.SettingsMenuButtons()),
	)
	return b.editMessage(msg)
}

func (b *Bot) handleNotificationsSettings(callback *tgbotapi.CallbackQuery) error {
	user, err := b.userRepo.GetByTelegramID(context.Background(), callback.From.ID)
	if err != nil {
		return err
	}

	var buttons [][]MenuButton
	if user.NotificationEnabled {
		buttons = [][]MenuButton{
			{{Text: "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", CallbackData: "notify_off"}},
		}
	} else {
		buttons = [][]MenuButton{
			{{Text: "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", CallbackData: "notify_on"}},
		}
	}
	buttons = append(buttons, []MenuButton{{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", CallbackData: "settings_menu"}})

	text := fmt.Sprintf("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"+
		"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", boolToEnabledString(user.NotificationEnabled))

	msg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		createKeyboard(buttons),
	)
	return b.editMessage(msg)
}

func (b *Bot) handleTimeSettings(callback *tgbotapi.CallbackQuery) error {
	user, err := b.userRepo.GetByTelegramID(context.Background(), callback.From.ID)
	if err != nil {
		return err
	}

	text := fmt.Sprintf("üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"+
		"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: %d:00\n\n"+
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /time <—á–∞—Å> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"+
		"–ü—Ä–∏–º–µ—Ä: /time 9 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 9:00", user.NotificationHour)

	buttons := [][]MenuButton{
		{{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", CallbackData: "settings_menu"}},
	}

	msg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		createKeyboard(buttons),
	)
	return b.editMessage(msg)
}

func (b *Bot) handleDeleteTopicMenu(callback *tgbotapi.CallbackQuery) error {
	// First get the user by Telegram ID
	user, err := b.userRepo.GetByTelegramID(context.Background(), callback.From.ID)
	if err != nil || user == nil {
		log.Printf("Error getting user or user not found: %v", err)
		text := "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
		buttons := [][]MenuButton{
			{{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", CallbackData: "topics_menu"}},
		}
		msg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			createKeyboard(buttons),
		)
		return b.editMessage(msg)
	}
	
	// Now use the correct user.ID to get topics
	topics, err := b.topicRepo.GetAllByUserID(context.Background(), user.ID)
	if err != nil {
		log.Printf("Error getting topics: %v", err)
		return err
	}

	if len(topics) == 0 {
		text := "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É\""
		buttons := [][]MenuButton{
			{{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", CallbackData: "topics_menu"}},
		}

		msg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			createKeyboard(buttons),
		)
		return b.editMessage(msg)
	}

	var text strings.Builder
	text.WriteString("üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã\n\n")
	text.WriteString("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n")
	text.WriteString("/delete <–Ω–æ–º–µ—Ä>\n\n")
	text.WriteString("–í–∞—à–∏ —Ç–µ–º—ã:\n")

	for i, topic := range topics {
		text.WriteString(fmt.Sprintf("%d. %s\n", i+1, topic.Name))
	}

	buttons := [][]MenuButton{
		{{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", CallbackData: "topics_menu"}},
	}

	msg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text.String(),
		createKeyboard(buttons),
	)
	return b.editMessage(msg)
}

// handleTopicComplete handles the completion of a topic
func (b *Bot) handleTopicComplete(ctx context.Context, userID int64, chatID int64, repID int64) error {
	// Get the repetition
	repetitions, err := b.repetitionRepo.GetByTopicID(ctx, userID, repID)
	if err != nil || len(repetitions) == 0 {
		log.Printf("Error getting repetition: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return b.sendMessage(msg)
	}

	rep := repetitions[0]

	// Mark current repetition as completed
	rep.Completed = true
	now := time.Now()
	rep.LastReviewDate = &now
	err = b.repetitionRepo.Update(ctx, &rep)
	if err != nil {
		log.Printf("Error updating repetition: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return b.sendMessage(msg)
	}

	// Schedule next repetition if not the last one
	if rep.RepetitionNumber < 7 {
		nextRep := &models.Repetition{
			UserID:           userID,
			TopicID:          rep.TopicID,
			RepetitionNumber: rep.RepetitionNumber + 1,
			NextReviewDate:   b.repetitionRepo.CalculateNextReviewDate(rep.RepetitionNumber),
			CreatedAt:        time.Now(),
			UpdatedAt:        time.Now(),
		}
		err = b.repetitionRepo.Create(ctx, nextRep)
		if err != nil {
			log.Printf("Error creating next repetition: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return b.sendMessage(msg)
		}

		// Send success message with next repetition date
		text := fmt.Sprintf("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ %s",
			nextRep.NextReviewDate.Format("02.01.2006"))
		msg := tgbotapi.NewMessage(chatID, text)
		return b.sendMessage(msg)
	} else {
		// If this was the last repetition
		text := "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —ç—Ç–æ–π —Ç–µ–º—ã!"
		msg := tgbotapi.NewMessage(chatID, text)
		return b.sendMessage(msg)
	}
}

func (b *Bot) handleStartAddTopic(callback *tgbotapi.CallbackQuery) error {
	if callback.Message == nil || callback.From == nil {
		return fmt.Errorf("invalid callback data: Message or From is nil")
	}

	log.Printf("Starting add topic for user %d", callback.From.ID)

	userID := callback.From.ID
	userStates[userID] = &UserState{
		Action: "adding_topic",
		Step:   1,
		Data:   make(map[string]string),
	}

	log.Printf("Set user state: %+v", userStates[userID])

	text := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n" +
		"–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\" –∏–ª–∏ \"–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\""

	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", callbackCancelAction),
		),
	)
	return b.sendMessage(msg)
}

func (b *Bot) handleCancelAction(callback *tgbotapi.CallbackQuery) error {
	if callback.Message == nil || callback.From == nil {
		return fmt.Errorf("invalid callback data: Message or From is nil")
	}

	userID := callback.From.ID
	log.Printf("Canceling action for user %d, previous state: %+v", userID, userStates[userID])
	delete(userStates, userID)
	log.Printf("State after deletion: %+v", userStates[userID])

	text := "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É:"
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
	msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
	return b.sendMessage(msg)
} 