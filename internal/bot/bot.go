package bot

import (
	"context"
	"fmt"
	"log"
	"os"
	"runtime/debug"
	"strings"
	"sync"
	"time"

	"github.com/example/engbot/internal/database"
	"github.com/example/engbot/internal/scheduler"
	"github.com/example/engbot/pkg/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func init() {
	// Load .env file if it exists
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: .env file not found or error loading it: %v", err)
	}
}

// MenuButton represents a button in the menu
type MenuButton struct {
	Text         string
	CallbackData string
}

// createKeyboard creates a keyboard from menu buttons
func createKeyboard(buttons [][]MenuButton) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for _, row := range buttons {
		var keyboardRow []tgbotapi.InlineKeyboardButton
		for _, button := range row {
			keyboardRow = append(keyboardRow, tgbotapi.NewInlineKeyboardButtonData(button.Text, button.CallbackData))
		}
		keyboard = append(keyboard, keyboardRow)
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// Bot represents the Telegram bot instance
type Bot struct {
	api               *tgbotapi.BotAPI
	token             string
	schedulerEnabled  bool
	scheduler         *scheduler.Scheduler
	mu               sync.RWMutex
	
	userRepo          *database.UserRepository
	topicRepo         *database.TopicRepository
	repetitionRepo    *database.RepetitionRepository
	statsRepo         *database.StatisticsRepository
}

// NewBot creates a new bot instance
func NewBot(token string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	return &Bot{
		api:               api,
		token:             token,
		schedulerEnabled:  os.Getenv("ENABLE_SCHEDULER") != "false",
		mu:               sync.RWMutex{},
		userRepo:          database.NewUserRepository(),
		topicRepo:         database.NewTopicRepository(),
		repetitionRepo:    database.NewRepetitionRepository(),
		statsRepo:         database.NewStatisticsRepository(),
	}, nil
}

// safeGoroutine –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏
func safeGoroutine(f func()) {
	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("Recovered from panic in goroutine: %v", r)
				// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å stack trace –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
				debug.PrintStack()
			}
		}()
		f()
	}()
}

// Start initializes and starts the bot
func (b *Bot) Start(ctx context.Context) error {
	log.Println("Starting bot initialization...")

	// Initialize the bot with the given token
	botAPI, err := tgbotapi.NewBotAPI(b.token)
	if err != nil {
		return fmt.Errorf("unable to create bot: %w", err)
	}
	
	b.api = botAPI
	log.Printf("Authorized on account %s (ID: %d)", botAPI.Self.UserName, botAPI.Self.ID)

	// Set up bot commands menu
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
		{Command: "add", Description: "üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É"},
		{Command: "list", Description: "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º"},
		{Command: "delete", Description: "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É"},
		{Command: "stats", Description: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
		{Command: "notify", Description: "üîî –í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"},
		{Command: "time", Description: "üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"},
		{Command: "help", Description: "‚ùì –ü–æ–º–æ—â—å"},
	}

	// Set commands for the menu button
	log.Println("Setting up bot commands menu...")
	cmdConfig := tgbotapi.NewSetMyCommands(commands...)
	if _, err := b.api.Request(cmdConfig); err != nil {
		log.Printf("Warning: Failed to set bot commands menu: %v", err)
	} else {
		log.Printf("Successfully set up bot commands menu")
	}
	
	// Set up the update configuration
	log.Println("Configuring updates...")
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	
	// Get updates channel
	updates := b.api.GetUpdatesChan(updateConfig)
	log.Println("Successfully started receiving updates")
	
	// Start goroutine to handle scheduled reminders
	if b.schedulerEnabled {
		log.Println("Starting scheduler...")
		if err := b.scheduleReminders(ctx); err != nil {
			return fmt.Errorf("failed to schedule reminders: %w", err)
		}
		log.Println("Scheduler started successfully")
	} else {
		log.Println("Scheduler is disabled")
	}
	
	// Wait for termination signal in a separate goroutine
	errChan := make(chan error, 1)
	safeGoroutine(func() {
		errChan <- b.waitForTermination(ctx)
	})
	
	log.Println("Bot is ready to handle messages")
	
	// Handle incoming updates
	for update := range updates {
		select {
		case <-ctx.Done():
			log.Println("Context cancelled, stopping bot...")
			return ctx.Err()
		case err := <-errChan:
			log.Printf("Termination signal received: %v", err)
			return fmt.Errorf("termination error: %w", err)
		default:
			update := update // Create a new variable for the goroutine
			safeGoroutine(func() {
				if err := b.handleUpdate(ctx, update); err != nil {
					log.Printf("Error handling update [ID: %d]: %v", update.UpdateID, err)
				}
			})
		}
	}
	
	log.Println("Update loop finished")
	return nil
}

// Stop gracefully stops the bot
func (b *Bot) Stop(ctx context.Context) error {
	// Stop the scheduler
	if b.schedulerEnabled && b.scheduler != nil {
		b.scheduler.Stop()
	}
	
	log.Println("Bot stopped successfully")
	return nil
}

// scheduleReminders sets up scheduled reminder jobs
func (b *Bot) scheduleReminders(ctx context.Context) error {
	log.Println("Starting reminder scheduler...")
	
	// Create scheduler with current bot as Notifier
	b.scheduler = scheduler.New(b)
	
	// Start scheduler
	if err := b.scheduler.Start(ctx); err != nil {
		return fmt.Errorf("failed to start scheduler: %w", err)
	}
	
	log.Println("Reminder scheduler started successfully")
	return nil
}

// waitForTermination waits for termination signal and gracefully stops the bot
func (b *Bot) waitForTermination(ctx context.Context) error {
	<-ctx.Done()
	return ctx.Err()
}

// handleUpdate processes incoming updates from Telegram
func (b *Bot) handleUpdate(ctx context.Context, update tgbotapi.Update) error {
	if update.Message != nil {
		if update.Message.From == nil {
			return nil
		}
		if update.Message.Chat == nil {
			return nil
		}

		log.Printf("Received message from user %d: %s", update.Message.From.ID, update.Message.Text)

		// Handle commands
		if update.Message.IsCommand() {
			return b.HandleCommand(ctx, update.Message)
		}
		
		// Handle text messages based on user state
		if state, exists := userStates[update.Message.From.ID]; exists {
			log.Printf("Found user state: %+v", state)
			switch state.Action {
			case "adding_topic":
				return b.handleAddTopicText(update.Message)
			default:
				log.Printf("Unknown action in user state: %s", state.Action)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
				msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
				return b.sendMessage(msg)
			}
		}

		log.Printf("No state found for user %d", update.Message.From.ID)
		// For users without state, show the main menu
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
		msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
		return b.sendMessage(msg)
	} else if update.CallbackQuery != nil {
		// Handle button callbacks
		return b.HandleCallback(ctx, update.CallbackQuery)
	}

	return nil
}

// SendReminders implements the scheduler.Notifier interface
func (b *Bot) SendReminders(userID int64, count int) error {
	ctx := context.Background()
	// Check if user exists
	_, err := b.userRepo.GetByTelegramID(ctx, userID)
	if err != nil {
		log.Printf("Error getting user %d: %v", userID, err)
		return err
	}

	chatID := userID

	// Format message based on word count
	wordForm := "—Å–ª–æ–≤"
	if count == 1 {
		wordForm = "—Å–ª–æ–≤–æ"
	} else if count > 1 && count < 5 {
		wordForm = "—Å–ª–æ–≤–∞"
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–£ –≤–∞—Å %d %s –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –û—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.", count, wordForm))
	msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
	return b.sendMessage(msg)
}

// MainMenuButtons returns the buttons for the main menu
func (b *Bot) MainMenuButtons() [][]MenuButton {
	buttons := [][]MenuButton{
		{
			{Text: "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏", CallbackData: "topics_menu"},
		},
		{
			{Text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", CallbackData: "stats"},
			{Text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", CallbackData: "settings"},
		},
		{
			{Text: "‚ùì –ü–æ–º–æ—â—å", CallbackData: "help"},
		},
	}
	return buttons
}

// TopicsMenuButtons returns the buttons for the topics submenu
func (b *Bot) TopicsMenuButtons() [][]MenuButton {
	buttons := [][]MenuButton{
		{
			{Text: "üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", CallbackData: callbackStartAddTopic},
			{Text: "üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", CallbackData: "list_topics"},
		},
		{
			{Text: "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", CallbackData: "delete_topic"},
		},
		{
			{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", CallbackData: "main_menu"},
		},
	}
	return buttons
}

// SettingsMenuButtons returns the buttons for the settings submenu
func (b *Bot) SettingsMenuButtons() [][]MenuButton {
	buttons := [][]MenuButton{
		{
			{Text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", CallbackData: "notifications_settings"},
			{Text: "üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", CallbackData: "time_settings"},
		},
		{
			{Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", CallbackData: "main_menu"},
		},
	}
	return buttons
}

// sendMessage sends a message with proper error handling
func (b *Bot) sendMessage(msg tgbotapi.MessageConfig) error {
	// Validate and clean message text
	text := strings.TrimSpace(msg.Text)
	if text == "" {
		return fmt.Errorf("cannot send empty message: message text is required")
	}

	// Add main menu buttons if no other markup is specified
	if msg.ReplyMarkup == nil {
		msg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
	}

	// Set the cleaned text back
	msg.Text = text

	// Try to send message
	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send message: %w", err)
	}
	return nil
}

// editMessage edits a message with proper error handling
func (b *Bot) editMessage(msg tgbotapi.EditMessageTextConfig) error {
	// Validate and clean message text
	text := strings.TrimSpace(msg.Text)
	if text == "" {
		return fmt.Errorf("cannot edit with empty message: message text is required")
	}

	// Set the cleaned text back
	msg.Text = text

	// Try to edit message
	_, err := b.api.Send(msg)
	if err != nil {
		// If editing fails, try sending a new message
		newMsg := tgbotapi.NewMessage(msg.ChatID, text)
		if msg.ReplyMarkup != nil {
			newMsg.ReplyMarkup = msg.ReplyMarkup
		} else {
			// Add main menu buttons if no other markup is specified
			newMsg.ReplyMarkup = createKeyboard(b.MainMenuButtons())
		}
		return b.sendMessage(newMsg)
	}
	return nil
}

func (b *Bot) handleAddTopicText(message *tgbotapi.Message) error {
	if message == nil || message.From == nil || message.Chat == nil {
		return fmt.Errorf("invalid message: missing required fields")
	}

	topicName := strings.TrimSpace(message.Text)
	if topicName == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∞\".")
		return b.sendMessage(msg)
	}

	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.userRepo.GetByTelegramID(ctx, message.From.ID)
	if err != nil || user == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		newUser := &models.User{
			TelegramID:          message.From.ID,
			Username:            message.From.UserName,
			FirstName:           message.From.FirstName,
			LastName:            message.From.LastName,
			NotificationEnabled: true,
			NotificationHour:    9,
		}

		if err := b.userRepo.Create(ctx, newUser); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ ID
		user, err = b.userRepo.GetByTelegramID(ctx, message.From.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: %v", err)
			return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
		}

		if user == nil || user.ID == 0 {
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ ID = 0 –¥–ª—è telegram_id %d", message.From.ID)
			return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
	topic := &models.Topic{
		Name:      topicName,
		UserID:    user.ID,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := b.topicRepo.Create(ctx, topic); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (telegram_id %d): %v", user.ID, message.From.ID, err)
		return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
	}

	if topic.ID == 0 {
		log.Printf("–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ ID = 0 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", user.ID)
		return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã"))
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–º—ã
	stats := &models.Statistics{
		UserID:  user.ID,
		TopicID: topic.ID,
	}
	if err := b.statsRepo.Create(ctx, stats); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —É–¥–∞–ª—è–µ–º —Ç–µ–º—É
		if delErr := b.topicRepo.Delete(ctx, user.ID, topic.ID); delErr != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", delErr)
		}
		return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
	}

	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
	repetition := &models.Repetition{
		UserID:           user.ID,
		TopicID:          topic.ID,
		RepetitionNumber: 1,
		NextReviewDate:   time.Now().Add(24 * time.Hour),
		CreatedAt:        time.Now(),
		UpdatedAt:        time.Now(),
	}

	if err := b.repetitionRepo.Create(ctx, repetition); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %v", err)
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º —Ç–µ–º—É
		if delErr := b.topicRepo.Delete(ctx, user.ID, topic.ID); delErr != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: %v", delErr)
		}
		return b.sendMessage(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	delete(userStates, message.From.ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
	text := fmt.Sprintf("‚úÖ –¢–µ–º–∞ \"%s\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:", topic.Name) +
		"\n1. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Ç–µ–º—É" +
		"\n2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º" +
		"\n3. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = createKeyboard([][]MenuButton{
		{{Text: "üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", CallbackData: callbackStartAddTopic}},
		{{Text: "üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º", CallbackData: "list_topics"}},
		{{Text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", CallbackData: "main_menu"}},
	})
	return b.sendMessage(msg)
} 